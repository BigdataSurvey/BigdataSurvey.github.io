<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>日常问题</title>
      <link href="/2020/06/05/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
      <url>/2020/06/05/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>正确：</p><p>日常问题</p><!--调用父组件自己的变量--><p></p><!--调用子组件的变量--><child #data></child><!--在父组件模板里，新建一个本地变量来代表子组件，然后利用这个变量来读取子组件的属性和调用子组件的方法--><button (click)="data.click()">点击</button><!--调用子组件的方法--><p>错误：<br>&lt;child #data *ngIf=“data.title”&gt;</child> 本地变量 方式 不能作用于自己</p><p>setValue: 使用的时候需要每个from control都要设置值。否则,ERROR Error: Must supply a value for form control with name: ‘xxxxx’</p><p>patchValue: 类似打补丁,不需要每个from control都要设置值。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端/获取某一元素到页面顶端的距离</title>
      <link href="/2020/02/05/%E5%89%8D%E7%AB%AF/%E8%8E%B7%E5%8F%96%E6%9F%90%E4%B8%80%E5%85%83%E7%B4%A0%E5%88%B0%E9%A1%B5%E9%9D%A2%E9%A1%B6%E7%AB%AF%E7%9A%84%E8%B7%9D%E7%A6%BB/"/>
      <url>/2020/02/05/%E5%89%8D%E7%AB%AF/%E8%8E%B7%E5%8F%96%E6%9F%90%E4%B8%80%E5%85%83%E7%B4%A0%E5%88%B0%E9%A1%B5%E9%9D%A2%E9%A1%B6%E7%AB%AF%E7%9A%84%E8%B7%9D%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="jQuery的offset-top"><a href="#jQuery的offset-top" class="headerlink" title="jQuery的offset().top"></a>jQuery的offset().top</h3><p>它获取的值==你获取的元素的上边框距离html的顶部的值</p><h3 id="JS的offsetTop"><a href="#JS的offsetTop" class="headerlink" title="JS的offsetTop"></a>JS的offsetTop</h3><p>它获取的值==你获取的元素的上边框距离与它最近的父级元素（必须要脱离文档流的，relative没有用）的的顶部的值</p><a id="more"></a><h3 id="原生："><a href="#原生：" class="headerlink" title="原生："></a>原生：</h3><p>####方法一：<br>递归节点的offsetTop</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementToPageTop</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(el.parentElement) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getElementToPageTop(el.parentElement) + el.offsetTop</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> el.offsetTop</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：<br>获取当前元素到可视区域顶端的距离<br>object.getBoundingClientRect();<br>再加上 document.documentElement.scrollTop</p><h3 id="jquery："><a href="#jquery：" class="headerlink" title="jquery："></a>jquery：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'xxx'</span>).offset().top;</span><br></pre></td></tr></table></figure><p><strong>$\color{red}{注意}$：有图片的一定要图片加载完成后再计算</strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端/uni-app 笔记</title>
      <link href="/2019/10/13/%E5%89%8D%E7%AB%AF/uni-app%20%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/10/13/%E5%89%8D%E7%AB%AF/uni-app%20%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>-page 相当于body节点，列如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">page&#123;</span><br><span class="line">  backgroun-color: #ccc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内置css变量<br>–status-bar-height 系统状态栏高度<br>–window-top 内容区域距离顶部的距离 NavigationBar 的高度<br>–window-bottom 内容区域距离底部的距离 TabBar 的高度</p><a id="more"></a><h3 id="背景图片-https-uniapp-dcloud-io-frame"><a href="#背景图片-https-uniapp-dcloud-io-frame" class="headerlink" title="[背景图片](https://uniapp.dcloud.io/frame?"></a>[背景图片](<a href="https://uniapp.dcloud.io/frame" target="_blank" rel="noopener">https://uniapp.dcloud.io/frame</a>?</h3><p><code>uni-app</code> 支持使用在 css 里设置背景图片，使用方式与普通 <code>web</code> 项目相同，需要注意以下几点：</p><ul><li>支持 base64 格式图片。</li><li>支持网络路径图片。</li><li>使用本地路径背景图片需注意：<ol><li>图片小于 40kb，<code>uni-app</code> 会自动将其转化为 base64 格式</li><li>图片大于等于 40kb， 需开发者自己将其转换为 base64 格式使用，或将其挪到服务器上，从网络地址引用。</li><li>本地背景图片的引用路径推荐使用以 ~@ 开头的绝对路径。</li><li><code>uni-app v3</code>版本设定为不自动将图片转 base64 格式</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java/win基本命令，Java基本知识</title>
      <link href="/2019/08/15/Java/win%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%EF%BC%8CJava%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
      <url>/2019/08/15/Java/win%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%EF%BC%8CJava%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h4 id="window-相关-DOS-命令"><a href="#window-相关-DOS-命令" class="headerlink" title="window 相关 DOS 命令"></a>window 相关 DOS 命令</h4><p>1.exit 推出当前DOS窗口<br>2.cls 清除命令<br>3.dir 列出当前文件夹子目录/子文件<br>4.cd 命令（change directory）<br>     - cd .. 回到上级<br>     - cd \ 回到根目录<br>     -  d: 切换盘符</p><a id="more"></a><h4 id="Java语言特性"><a href="#Java语言特性" class="headerlink" title="Java语言特性"></a>Java语言特性</h4><p>1.简单性<br>        java不在支持多继承并屏蔽了指针的概念，c++支持<br>        Java语言底层是c++实现的<br>2.面向对象<br>        纯面向对象的。更符合人的思维模式。更容易理解<br>3.可移植性<br>          java程序可以做到一次编译，跨平台运行，不做任何修改。因操作系统的内核不同，执行指令的方式也是不一样的。所以java程序运行在一台虚拟机计算机（jvm）。<br>4.多线程<br>5.健壮性<br>        和自动垃圾回收机制有关，自动垃圾回收机制简称GC机制</p><h4 id="Java-加载与执行"><a href="#Java-加载与执行" class="headerlink" title="Java 加载与执行"></a>Java 加载与执行</h4><p>编译<br>.java-&gt; .class(字节码文件）<br>执行<br>类装载器-&gt; Java虚拟机（JVM）-&gt; 操作系统 -&gt; 硬件平台<br>（java.exe 命令会启动Java虚拟机（JVM）， JVM会启动类类加载器classLoader<br>classLoader会去硬盘上搜索A.class文件,找到该文件将字节码文件加载到JVM中<br>JVM将A.class字节码文件解释成二进制，然后操作系统执行二进制和底层硬件平台进行交互）</p><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p>#####注意点：<br>1.大小写敏感<br>2.源文件名必须和类名相同，保存文件时，应当使用类名作为文件名保存。（不同会导致编译错误）<br>3.每个单词首字母大写<br>4.标识符以字母（A-Z或a-z）,美元符（$），或者下划线（_）开始<br>5.每个语句后面必须加‘；’</p><p>####</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class FreshJuiceTest &#123;</span><br><span class="line">  &#x2F;&#x2F;  方法体</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(“我是一个程序员”);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法体中可编写多条java语句</p><p>执行java xxxx，要求xxxx.class.当中必须有主方法。没有主方法会出现运行阶段的错误</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java/关键字</title>
      <link href="/2019/08/15/Java/%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2019/08/15/Java/%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>####public：</p><p>具有最大的访问权限，可以访问任何一个在classpath下的类、接口、异常等。它往往用于对外的情况，也就是对象或类对外的一种接口的形式。</p><p>####protected：</p><p>主要的作用就是用来保护子类的。它的含义在于子类可以用它修饰的成员，其他的不可以，它相当于传递给子类的一种继承的东西</p><a id="more"></a><p>####default：</p><p>有时候也称为friendly，它是针对本包访问而设计的，任何处于本包下的类、接口、异常等，都可以相互访问，即使是父类没有用protected修饰的成员也可以。</p><p>####private：</p><p>访问权限仅限于类的内部，是一种封装的体现，例如，大多数成员变量都是修饰符为private的，它们不希望被其他任何外部的类访问。</p><pre><code>| 类内部 | 包内子类 | 包内非子类 | 包外子类 | 包外非子类</code></pre><p>—|—|—|—|—|—<br>public | √ | √ | √ | √ | √<br>protected | √ | √ | √ | √ | ×<br>default | √ | √ | √ | × | ×<br>private | √ | × | × | × | ×</p><blockquote><p>注意：java的访问控制是停留在编译层的，也就是它不会在.class文件中留下任何的痕迹，只在编译的时候进行访问控制的检查。其实，通过反射的手段，是可以访问任何包下任何类中的成员，例如，访问类的私有成员也是可能的。</p></blockquote><p>####区别：</p><p>public：可以被所有其他类所访问</p><p>private：只能被自己访问和修改</p><p>protected：自身、子类及同一个包中类可以访问</p><p>default：同一包中的类可以访问，声明时没有加修饰符，认为是friendly。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java/命名规范</title>
      <link href="/2019/08/15/Java/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
      <url>/2019/08/15/Java/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<p>命名规范<br>小驼峰命名方式：第一个单词的首字母小写，之后每一个单词首字符大写，列变量名，方法名。<br>大驼峰命名方式：第一个单词的首字母也大写了。常用于类名，接口名，属性，命名空间。譬如public class HelloWorld;<br>常量名：全部大写<br>java语言当中所有的字符串型字面值必须使用双引号括起来，双引号是半角<br>java语言当中所有的字符型字面值必须使用单引号括起来</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java/数据类型</title>
      <link href="/2019/08/15/Java/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/08/15/Java/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><p>1.整数型<br>  byte，short，int，long<br>2.浮点型<br> float，double<br>3.布尔型<br> boolean<br>4.字符型<br> char</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">类型   占用空间大小（字节）</span><br><span class="line">---------------------------------------</span><br><span class="line">byte       1</span><br><span class="line">short      2</span><br><span class="line">int        4</span><br><span class="line">long       8</span><br><span class="line">float      4</span><br><span class="line">double     8</span><br><span class="line">boolean    1</span><br><span class="line">char       2</span><br></pre></td></tr></table></figure><p>1.byte 类型的最大值 2的7次方 - 1， 结果是127。最小值是-128；<br>2.小容量自动转换成大容量类型<br>如 int 类型变量赋值给long类型的变量。<br>long类型赋值默认int类型，超过int类型大小，需在数字后面加L，以long类型处理；<br>3.强制转换 int num =（int）100L；不推荐使用，可能会发生精度损失，数据溢出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class FreshJuiceTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int num &#x3D; (int) 100L;</span><br><span class="line">        System.out.println(num); &#x2F;&#x2F; 输出100</span><br><span class="line"></span><br><span class="line">        int num2 &#x3D; (int) 1000000000000L;</span><br><span class="line">        System.out.println(num2); &#x2F;&#x2F; 输出-727379968</span><br><span class="line"></span><br><span class="line">        int num3 &#x3D; (int) 3.5;</span><br><span class="line">        System.out.println(num3); &#x2F;&#x2F; 输出3</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.boolean 不能强制转换<br>5.byte,short,char  都自动转成 int 类型<br>6.任何类型和字符串进行连接时，结果都会变成字符串</p><h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java/构造方法</title>
      <link href="/2019/08/15/Java/%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/"/>
      <url>/2019/08/15/Java/%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>1.构造方法不能return 一个具体的返回值<br>2.如果没有编写任何构造方法，编译器会默认一个构造方法，没有参数、方法<br>3.一旦编写了至少一个构造方法，那么编译器将不再赠送<br>4.构造方法可以重载<br>5.构造方法的名称必须和所在的类名称完全一样，就连大小写也要一样<br>6.构造方法不要写返回值类型，连void都不写</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git分支规范</title>
      <link href="/2019/08/05/git%E5%88%86%E6%94%AF%E8%A7%84%E8%8C%83/"/>
      <url>/2019/08/05/git%E5%88%86%E6%94%AF%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<p>1、主分支master</p><p>master分支有且仅有一个，用于存储正式发布的历史，在版本库初始化时自动生成。master分支是所有开发活动的核心分支，所有的开发活动产生的输出物最终都会反映到主分支的代码中。</p><p>2、开发分支develop</p><p>develop分支有且仅有一个，develop分支用来分布重大版本，是所有功能的集成分支。当develop分支上的代码已实现了软件需求说明书中所有的功能，通过了所有的集成测试后，且代码已经足够稳定时，就可以将develop合并到master分支进行发布。</p><a id="more"></a><p>创建分支<br> git checkout -b dev master<br>将 Dev 分支发布到 Master 分支的命令：<br>切换到 Master 分支<br>git checkout master<br>合并分支<br>git merge –no–ff dev<br>注：master和develop分支的权限需要限制。</p><p>3、功能分支feature</p><p>feature分支会有很多个，功能分支是为了开发某种特定功能，从master分支上面分出来的。开发完成后，并经过test分支测试后，最终合并到develop。</p><p>feature分支命名规范：feature_${Author}<em>${yyMMdd}</em>${功能名称}<br>git checkout -b feature-x dev<br>开发完成后，将功能分支合并到dev 分支：<br>git checkout dev<br>git merge –no-ff feature-x</p><p>注意：feature分支要定期合并master的代码（一般一周一次）</p><p>4、测试分支test</p><p>feature分支会有很多个，并与feature分支一一对应，feature开发完成后需要从fork一个同名的test分支来进行测试。提测时需要告知测试人员专门的测试分支名称和版本。测试阶段如果发生代码改动，需要在feature分支进行修改之后再合并到test分支，然后同步告知测试人员在新版本之上进行测试。</p><p>test分支命名规范：同feature，test_${Author}<em>${yyMMdd}</em>${功能名称}</p><p>5、修补分支bugfix</p><p>bugfix分支会有多个，系统日常维护难免会存在bug，这时就需要创建一个分支，进行bug修补。bugfix分支是从master分支上面分出来的，在对bug修补之后，要先合并到develop分支进行测试，测试通过后再合并进master分支，最终发布master分支。</p><p>bugfix分支命名规范：bugfix_${Author}<em>${yyMMdd}</em>${补丁名称}。</p><p>6.预发布分支 Release</p>]]></content>
      
      
      
        <tags>
            
            <tag> 常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java/Java 内存划分</title>
      <link href="/2019/08/05/Java/Java%20%E5%86%85%E5%AD%98%E5%88%92%E5%88%86/"/>
      <url>/2019/08/05/Java/Java%20%E5%86%85%E5%AD%98%E5%88%92%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>栈（Stack）<br>堆（Heap）</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端/console.log()  修改样式</title>
      <link href="/2019/08/05/%E5%89%8D%E7%AB%AF/console.log()%20%20%E4%BF%AE%E6%94%B9%E6%A0%B7%E5%BC%8F/"/>
      <url>/2019/08/05/%E5%89%8D%E7%AB%AF/console.log()%20%20%E4%BF%AE%E6%94%B9%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>在有些网站中，console内容是有样式的，如果之前没有见到过，你可以打开百度首页，按下F12，里边会有</p><p>console.log(“%cxxxx”,”color:red;font-size:16px”)</p><p>还可以添加背景图片，写法同css</p><p>在%c后写自己要打印的东西，然后逗号后面的就是它的样式</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端/element 问题集锦</title>
      <link href="/2019/08/05/%E5%89%8D%E7%AB%AF/element%20%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/"/>
      <url>/2019/08/05/%E5%89%8D%E7%AB%AF/element%20%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/</url>
      
        <content type="html"><![CDATA[<p>搜索，多选下拉选择框（指定了value-key）</p><p>1：搜索，下拉列表中选择值后，再次搜索选择值，小概率出现（前面的值label消失）</p><p>2：复现。。搜索下拉选择值后，清空选项，再赋值选项，出现值label消失</p><p>解决方案：下次重新更新选项时，把当前选中的值加到选项中</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端/原型，原型链</title>
      <link href="/2019/07/08/%E5%89%8D%E7%AB%AF/%E5%8E%9F%E5%9E%8B%EF%BC%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>/2019/07/08/%E5%89%8D%E7%AB%AF/%E5%8E%9F%E5%9E%8B%EF%BC%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<p>1.每个对象（除null外）都拥有<strong>proto</strong>属性，这个属性会指向该对象的原型</p><p>2.所有函数拥有prototype属性</p><p>3.原型对象：拥有prototype属性的对象，在定义函数时就被创建</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, gender</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name= name;</span><br><span class="line"><span class="keyword">this</span>.age= age;</span><br><span class="line"><span class="keyword">this</span>.gender= gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    con()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age, <span class="keyword">this</span>.gender);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person(<span class="string">'lucien'</span>, <span class="string">'24'</span>, <span class="string">'男'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.__proto__ === Person.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person===Person.prototype.constructor)  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(person.constructor === Person); <span class="comment">// true 获取 person.constructor 时，其实 person 中并没有 constructor 属性,当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取</span></span><br></pre></td></tr></table></figure><p><img src="/image/%E5%8E%9F%E5%9E%8B/prototype.png" alt="alt 原型关系图 简"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js中万物兼对象， 所以 原型也是一个对象 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype === Person.prototype.__proto__); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针. 层层递进，构成了原型链</span></span><br></pre></td></tr></table></figure><p><img src="/image/%E5%8E%9F%E5%9E%8B/prototype01.png" alt="alt 原型关系图"></p><p>由<strong>proto</strong> 指向链接的线条就是原型链</p><p>补充说明：</p><p>绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 Person.prototype 中，实际上，它是来自于 Object.prototype ，与其说是一个属性，不如说是一个 getter/setter，当使用 obj.__proto__ 时，可以理解成返回了 Object.getPrototypeOf(obj)。</p><p>(文中图片来源于简书大佬)</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端/forEach，for..in..，for..of..的区别</title>
      <link href="/2019/05/05/%E5%89%8D%E7%AB%AF/forEach%EF%BC%8Cfor..in..%EF%BC%8Cfor..of..%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/05/05/%E5%89%8D%E7%AB%AF/forEach%EF%BC%8Cfor..in..%EF%BC%8Cfor..of..%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>forEach （ES3）<br>array.forEach(function(currentValue, index, arr), thisValue)<br>currentValue：必需 当前元素</p><p>index：可选 索引</p><p>arr：可选，当前数组对象</p><p>thisValue:：可选。传递给函数的值一般用 “this” 值。</p><p>如果这个参数为空， “undefined” 会传递给 “this” 值</p><p>for..in..<br>var obj={a:1,b:2,c:3};</p><p>for(var key in obj){</p><p>console.log(“obj.”+key+” = “+obj[key]);</p><p>}</p><p>// Output:</p><p>// “obj.a = 1”</p><p>// “obj.b = 2”</p><p>// “obj.c = 3”</p><p>hasOwnProperty() :继承的属性不显示</p><p>var triangle = {a: 1, b: 2, c: 3};<br>function ColoredTriangle() {<br>    this.color = ‘red’;<br>}<br> ColoredTriangle.prototype = triangle;<br> var obj = new ColoredTriangle();<br> for (var prop in obj) {<br>   if (obj.hasOwnProperty(prop)) {<br>      console.log(<code>obj.${prop} = ${obj[prop]}</code>);<br>   }<br>}<br> // Output:// “obj.color = red”</p><p>for..of..<br>for…of语句在可迭代对象（包括 Array，Map，Set，String，TypedArray，arguments 对象等等）上创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句</p><p>while - 当指定的条件为 true 时循环指定的代码块<br>do/while - 同样当指定的条件为 true 时循环指定的代码块</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端/calc 没起作用</title>
      <link href="/2019/02/05/%E5%89%8D%E7%AB%AF/calc%20%E6%B2%A1%E8%B5%B7%E4%BD%9C%E7%94%A8/"/>
      <url>/2019/02/05/%E5%89%8D%E7%AB%AF/calc%20%E6%B2%A1%E8%B5%B7%E4%BD%9C%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>calc(100% - 70px)<br>要在 - 的俩边加空格</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>杂记/句</title>
      <link href="/2019/02/05/%E6%9D%82%E8%AE%B0/%E5%8F%A5/"/>
      <url>/2019/02/05/%E6%9D%82%E8%AE%B0/%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>晓看天色暮看云，行也思君，坐也思君</p></blockquote><blockquote><p>春赏百花冬观雪，醒也念卿，梦亦念卿</p></blockquote><blockquote><p>二十多岁的那些网红很漂亮，不是因为他们漂亮而是因为二十多岁漂亮，三十四岁的你很漂亮，不是因为三十四岁漂亮而是你漂亮。</p></blockquote><blockquote><p>行善之人，福虽未至，祸已远去</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂记/国漫</title>
      <link href="/2019/02/05/%E6%9D%82%E8%AE%B0/%E5%9B%BD%E6%BC%AB/"/>
      <url>/2019/02/05/%E6%9D%82%E8%AE%B0/%E5%9B%BD%E6%BC%AB/</url>
      
        <content type="html"><![CDATA[<ul><li>大护法</li><li>大圣归来</li><li>刺客五六七</li><li>剑网侠肝义胆沈剑心</li><li>全职高手</li><li>一人之下</li><li>魁拔</li></ul><ul><li>狐妖小红娘</li><li>雄兵连</li><li>十万个冷笑话</li><li>尸兄</li><li>王牌御史</li><li>魔道祖师</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂记/电影</title>
      <link href="/2019/02/05/%E6%9D%82%E8%AE%B0/%E7%94%B5%E5%BD%B1/"/>
      <url>/2019/02/05/%E6%9D%82%E8%AE%B0/%E7%94%B5%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<h3 id="爱情，亲情"><a href="#爱情，亲情" class="headerlink" title="爱情，亲情﻿"></a>爱情，亲情﻿</h3><ul><li>当男人恋爱时</li><li>大鱼</li><li>海蒂和爷爷</li><li>溺水小刀</li><li>和莎莫的五百天</li><li>爱你，罗茜</li></ul><h3 id="悬疑"><a href="#悬疑" class="headerlink" title="悬疑﻿"></a>悬疑﻿</h3><ul><li>非常嫌疑犯</li><li>准备好了吗</li><li>天才少女</li><li>枪战﻿</li><li>老无所依</li><li>王者﻿</li></ul><h3 id="科幻"><a href="#科幻" class="headerlink" title="科幻"></a>科幻</h3><ul><li>永无止境</li><li>黑暗心灵</li></ul><h3 id="诙谐"><a href="#诙谐" class="headerlink" title="诙谐"></a>诙谐</h3><ul><li>城市猎人</li><li>同居牢友</li><li>别惹佐汉</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端/二维码 生成 并点击下载</title>
      <link href="/2018/03/05/%E5%89%8D%E7%AB%AF/%E4%BA%8C%E7%BB%B4%E7%A0%81%20%E7%94%9F%E6%88%90%20%E5%B9%B6%E7%82%B9%E5%87%BB%E4%B8%8B%E8%BD%BD/"/>
      <url>/2018/03/05/%E5%89%8D%E7%AB%AF/%E4%BA%8C%E7%BB%B4%E7%A0%81%20%E7%94%9F%E6%88%90%20%E5%B9%B6%E7%82%B9%E5%87%BB%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>#在 vue 中<br>##一：安装 qrcode-vue 组件</p><pre><code>    npm install --save qrcode.vue   import QrcodeVue from &apos;qrcode.vue&apos;;    在工程项目中，于组件同样的方式引入、注册    标签： &lt;qrcode-vue :value=&quot;value&quot; :size=&quot;size&quot; level=&quot;H&quot; id=&quot;qrcode&quot;&gt;&lt;/qrcode-vue&gt;    Component props：               value ： 网址链接              size：大小（单位 px）              level：容错级别具体参考：https://github.com/scopewu/qrcode.vue/blob/HEAD/README-zh_cn.md</code></pre><a id="more"></a><p>#在常规项目中<br>    ##一：引入 QRCode.js<br>             下载: <a href="http://davidshimjs.github.io/qrcodejs/" target="_blank" rel="noopener">http://davidshimjs.github.io/qrcodejs/</a><br>              引入: <script src="qrcode.js"></script><br>     ##二：调用<br>              // 简单<br>            let qrcode = new QRCode(document.getElementById(‘qrcode’), ‘your content’);</p><pre><code>    // 设置参数    let qrcode = new QRCode(qrcode , {        text: &apos;your content&apos;,        width: 256,        height: 256,        colorDark : &apos;#000000&apos;,        colorLight : &apos;#ffffff&apos;,        correctLevel : QRCode.CorrectLevel.H    });    // 使用 API    qrcode.clear(); //清除二维码内容    qrcode.makeCode(&apos;new content&apos;);  //设置二维码内容具体参考：http://davidshimjs.github.io/qrcodejs/</code></pre><p>点击下载二维码</p><pre><code>saveImg （）{     //找到canvas标签    let cvs= document.getElementById(&apos;qrcode&apos;).getElementsByTagName(&apos;canvas&apos;);    //创建一个a标签节点    let a = document.createElement(&quot;a&quot;)     //设置a标签的href属性（将canvas变成png图片）    a.href = cvs[0].toDataURL(&apos;image/png&apos;).replace(&apos;image/png&apos;, &apos;image/octet-stream&apos;)    //设置下载文件的名字    a.download = &quot;qrcode.png&quot;    //点击    a.click()}    </code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>